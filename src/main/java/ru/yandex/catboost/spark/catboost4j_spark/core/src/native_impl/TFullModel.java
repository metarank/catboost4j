/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.yandex.catboost.spark.catboost4j_spark.core.src.native_impl;
import java.io.*;
public class TFullModel implements Externalizable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected TFullModel(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TFullModel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        native_implJNI.delete_TFullModel(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public long GetDimensionsCount() {
    return native_implJNI.TFullModel_GetDimensionsCount(swigCPtr, this);
  }

  public int GetLeafCount() {
    return native_implJNI.TFullModel_GetLeafCount(swigCPtr, this);
  }

  public boolean HasLeafWeights() {
    return native_implJNI.TFullModel_HasLeafWeights(swigCPtr, this);
  }

  public void Calc(double[] featureValuesFromSpark, double[] result) {
    native_implJNI.TFullModel_Calc(swigCPtr, this, featureValuesFromSpark, result);
  }

  public void CalcSparse(int size, int[] featureIndicesFromSpark, double[] featureValuesFromSpark, double[] result) {
    native_implJNI.TFullModel_CalcSparse(swigCPtr, this, size, featureIndicesFromSpark, featureValuesFromSpark, result);
  }

  public void Save(String fileName, EModelType format, String exportParametersJsonString, int poolCatFeaturesMaxUniqValueCount) throws Exception {
    native_implJNI.TFullModel_Save(swigCPtr, this, fileName, format.swigValue(), exportParametersJsonString, poolCatFeaturesMaxUniqValueCount);
  }

  public TVector_i8 Serialize() {
    return new TVector_i8(native_implJNI.TFullModel_Serialize(swigCPtr, this), true);
  }

  public void Deserialize(byte[] binaryBuffer) {
    native_implJNI.TFullModel_Deserialize(swigCPtr, this, binaryBuffer);
  }

        private void writeSerialized(java.nio.ByteBuffer serializedData, DataOutput out) throws IOException {
            // Transfer data by blocks because there's no way to copy data to out directly
            final int BUFFER_SIZE = 16384;

            byte[] javaBuffer = new byte[BUFFER_SIZE];
            while (serializedData.remaining() >= BUFFER_SIZE) {
                serializedData.get(javaBuffer, 0, BUFFER_SIZE);
                out.write(javaBuffer);
            }
            if (serializedData.hasRemaining()) {
                final int remaining = serializedData.remaining();
                serializedData.get(javaBuffer, 0, remaining);
                out.write(javaBuffer, 0, remaining);
            }
        }

        public void writeExternal(ObjectOutput out) throws IOException {
            TVector_i8 data;
            try {
                data = Serialize();
            } catch (Exception e) {
                throw new IOException("Error in TFullModel::Serialize: " + e.getMessage());
            }
            java.nio.ByteBuffer byteBuffer = data.asDirectByteBuffer();
            out.writeInt(byteBuffer.remaining());
            writeSerialized(byteBuffer, out);
        }

        // without writing size to the stream, can be used to save to local or HDFS file
        public void write(DataOutput out) throws IOException {
            TVector_i8 data;
            try {
                data = Serialize();
            } catch (Exception e) {
                throw new IOException("Error in TFullModel::Serialize: " + e.getMessage());
            }
            java.nio.ByteBuffer byteBuffer = data.asDirectByteBuffer();
            writeSerialized(byteBuffer, out);
        }

        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
            read(in.readInt(), in);
        }

        // without reading size from the stream, can be used to save to local or HDFS file
        public void read(int size, DataInput in) throws IOException {
            byte[] data = new byte[size];
            in.readFully(data);
            try {
                Deserialize(data);
            } catch (Exception e) {
                throw new IOException("Error in TFullModel::Deserialize: " + e.getMessage());
            }
        }
    
  public boolean equalsImpl(TFullModel rhs) {
    return native_implJNI.TFullModel_equalsImpl(swigCPtr, this, TFullModel.getCPtr(rhs), rhs);
  }


public boolean equals(Object obj) {
    if (obj instanceof TFullModel) {
        boolean ptrEqual = (((TFullModel)obj).swigCPtr == this.swigCPtr);
        if (ptrEqual) {
            return true;
        } else {
            return this.equalsImpl((TFullModel)obj);
        }
    } else {
        return false;
    }
}

public int hashCode() {
    return (int)this.swigCPtr;
}


  public TFullModel() {
    this(native_implJNI.new_TFullModel(), true);
  }

}
