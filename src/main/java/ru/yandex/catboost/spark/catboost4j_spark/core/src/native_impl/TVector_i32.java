/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.yandex.catboost.spark.catboost4j_spark.core.src.native_impl;
import java.io.*;
public class TVector_i32 extends java.util.AbstractList<Integer> implements java.util.RandomAccess,Serializable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected TVector_i32(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TVector_i32 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(TVector_i32 obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        native_implJNI.delete_TVector_i32(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void yresize(long new_size) {
    native_implJNI.TVector_i32_yresize(swigCPtr, this, new_size);
  }

  public void reserve(long new_cap) {
    native_implJNI.TVector_i32_reserve(swigCPtr, this, new_cap);
  }

  public int getImpl(int index) {
    return native_implJNI.TVector_i32_getImpl(swigCPtr, this, index);
  }

  public int setImpl(int index, int element) {
    return native_implJNI.TVector_i32_setImpl(swigCPtr, this, index, element);
  }

  public int sizeImpl() {
    return native_implJNI.TVector_i32_sizeImpl(swigCPtr, this);
  }

  public void addImpl(int element) {
    native_implJNI.TVector_i32_addImpl__SWIG_0(swigCPtr, this, element);
  }

  public void addImpl(int index, int element) {
    native_implJNI.TVector_i32_addImpl__SWIG_1(swigCPtr, this, index, element);
  }

  public int removeImpl(int index) {
    return native_implJNI.TVector_i32_removeImpl(swigCPtr, this, index);
  }

        public TVector_i32(int[] elements) {
            this();
            reserve(elements.length);
            for (int element : elements) {
                addImpl(element);
            }
        }

        public TVector_i32(Iterable<Integer> elements) {
            this();
            for (int element : elements) {
                addImpl(element);
            }
        }

        public Integer get(int index) {
            return getImpl(index);
        }

        public Integer set(int index, Integer element) {
            return setImpl(index, element);
        }

        public int size() {
            return sizeImpl();
        }

        public boolean add(Integer element) {
            modCount++;
            addImpl(element);
            return true;
        }

        public void add(int index, Integer element) {
            modCount++;
            addImpl(index, element);
        }

        public Integer remove(int index) {
            modCount++;
            return removeImpl(index);
        }

        // Generic serialization implementation - not very fast

        private void writeObject(ObjectOutputStream out) throws IOException {
            int length = this.size();
            out.writeInt(length);
            for (int i = 0; i < length; ++i) {
                out.writeObject(this.get(i));
            }
        }

        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            this.swigCPtr = native_implJNI.new_TVector_i32();
            this.swigCMemOwn = true;

            int length = in.readInt();
            this.reserve(length);
            for (int i = 0; i < length; ++i) {
               this.add((Integer)in.readObject());
            }
        }
    
  public boolean equalsImpl(TVector_i32 rhs) {
    return native_implJNI.TVector_i32_equalsImpl(swigCPtr, this, TVector_i32.getCPtr(rhs), rhs);
  }


public boolean equals(Object obj) {
    if (obj instanceof TVector_i32) {
        boolean ptrEqual = (((TVector_i32)obj).swigCPtr == this.swigCPtr);
        if (ptrEqual) {
            return true;
        } else {
            return this.equalsImpl((TVector_i32)obj);
        }
    } else {
        return false;
    }
}

public int hashCode() {
    return (int)this.swigCPtr;
}


            public int[] toPrimitiveArray() {
                return native_implJNI.toPrimitiveArrayImpl_i32(swigCPtr, this);
            }

            // valid only until next reallocation of TVector, so, use with caution.
            public java.nio.ByteBuffer asDirectByteBuffer() {
                return (java.nio.ByteBuffer)native_implJNI.asDirectByteBufferImpl_i32(swigCPtr, this);
            }
        
  public TVector_i32() {
    this(native_implJNI.new_TVector_i32(), true);
  }

}
