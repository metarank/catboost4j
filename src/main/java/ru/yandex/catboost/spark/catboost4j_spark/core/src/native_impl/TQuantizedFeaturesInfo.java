/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.yandex.catboost.spark.catboost4j_spark.core.src.native_impl;
import java.io.*;
public class TQuantizedFeaturesInfo implements Serializable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected TQuantizedFeaturesInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TQuantizedFeaturesInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        native_implJNI.delete_TQuantizedFeaturesInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public TFeaturesLayoutPtr GetFeaturesLayout() {
    return new TFeaturesLayoutPtr(native_implJNI.TQuantizedFeaturesInfo_GetFeaturesLayout(swigCPtr, this), true);
  }

  public void Init(TFeaturesLayout featuresLayout) {
    native_implJNI.TQuantizedFeaturesInfo_Init(swigCPtr, this, TFeaturesLayout.getCPtr(featuresLayout), featuresLayout);
  }

  public boolean EqualWithoutOptionsTo(TQuantizedFeaturesInfo rhs, boolean ignoreSparsity) {
    return native_implJNI.TQuantizedFeaturesInfo_EqualWithoutOptionsTo__SWIG_0(swigCPtr, this, TQuantizedFeaturesInfo.getCPtr(rhs), rhs, ignoreSparsity);
  }

  public boolean EqualWithoutOptionsTo(TQuantizedFeaturesInfo rhs) {
    return native_implJNI.TQuantizedFeaturesInfo_EqualWithoutOptionsTo__SWIG_1(swigCPtr, this, TQuantizedFeaturesInfo.getCPtr(rhs), rhs);
  }

  public ENanMode GetNanMode(int floatFeatureIdx) {
    return ENanMode.swigToEnum(native_implJNI.TQuantizedFeaturesInfo_GetNanMode(swigCPtr, this, floatFeatureIdx));
  }

  public void SetNanMode(int floatFeatureIdx, ENanMode nanMode) {
    native_implJNI.TQuantizedFeaturesInfo_SetNanMode(swigCPtr, this, floatFeatureIdx, nanMode.swigValue());
  }

  public void GetQuantization(int floatFeatureIdx, TVector_float borders, SWIGTYPE_p_bool hasDefaultQuantizedBin, TDefaultQuantizedBin defaultQuantizedBin) {
    native_implJNI.TQuantizedFeaturesInfo_GetQuantization(swigCPtr, this, floatFeatureIdx, TVector_float.getCPtr(borders), borders, SWIGTYPE_p_bool.getCPtr(hasDefaultQuantizedBin), TDefaultQuantizedBin.getCPtr(defaultQuantizedBin), defaultQuantizedBin);
  }

  public void SetQuantization(int floatFeatureIdx, TVector_float borders, TDefaultQuantizedBin defaultQuantizedBin) {
    native_implJNI.TQuantizedFeaturesInfo_SetQuantization__SWIG_0(swigCPtr, this, floatFeatureIdx, TVector_float.getCPtr(borders), borders, TDefaultQuantizedBin.getCPtr(defaultQuantizedBin), defaultQuantizedBin);
  }

  public void SetQuantization(int floatFeatureIdx, TVector_float borders) {
    native_implJNI.TQuantizedFeaturesInfo_SetQuantization__SWIG_1(swigCPtr, this, floatFeatureIdx, TVector_float.getCPtr(borders), borders);
  }

            private void writeObject(ObjectOutputStream out) throws IOException {
                try {
                    TFeaturesLayout featuresLayout = this.GetFeaturesLayout().Get();
                    out.writeObject(featuresLayout);

                    int[] availableFloatFeatures
                        = native_impl.GetAvailableFeatures_Float(featuresLayout).toPrimitiveArray();

                    ENanMode nanMode;
                    TVector_float borders = new TVector_float();
                    boolp hasDefaultQuantizedBin = new boolp();
                    TDefaultQuantizedBin defaultQuantizedBin = new TDefaultQuantizedBin();

                    for (int i : availableFloatFeatures) {
                        nanMode = this.GetNanMode(i);
                        out.writeUnshared(nanMode);
                        this.GetQuantization(i, borders, hasDefaultQuantizedBin.cast(), defaultQuantizedBin);
                        out.writeUnshared(borders);
                        boolean hasDefaultQuantizedBinValue = hasDefaultQuantizedBin.value();
                        out.writeBoolean(hasDefaultQuantizedBinValue);
                        if (hasDefaultQuantizedBinValue) {
                            out.writeUnshared(defaultQuantizedBin);
                        }
                    }

                    out.writeUnshared(native_impl.GetCategoricalFeaturesUniqueValuesCounts(this));
                } catch (Exception e) {
                    throw new IOException(e);
                }
            }

            private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
                try {
                    this.swigCPtr = native_implJNI.new_TQuantizedFeaturesInfo();
                    this.swigCMemOwn = true;

                    TFeaturesLayout featuresLayout = (TFeaturesLayout)in.readObject();

                    int[] availableFloatFeatures
                        = native_impl.GetAvailableFeatures_Float(featuresLayout).toPrimitiveArray();

                    Init(featuresLayout);

                    for (int i : availableFloatFeatures) {
                        this.SetNanMode(i, (ENanMode)in.readUnshared());
                        TVector_float borders = (TVector_float)in.readUnshared();
                        boolean hasDefaultQuantizedBinValue = in.readBoolean();
                        TDefaultQuantizedBin defaultQuantizedBin = null;
                        if (hasDefaultQuantizedBinValue) {
                            defaultQuantizedBin = (TDefaultQuantizedBin)in.readUnshared();
                        }
                        this.SetQuantization(i, borders, defaultQuantizedBin);
                    }

                    TVector_i32 catFeaturesUniqueValuesCounts = (TVector_i32)in.readUnshared();
                    native_impl.UpdateCatFeaturesInfo(
                        catFeaturesUniqueValuesCounts.toPrimitiveArray(),
                        /*isInitialization*/ false,
                        this
                    );
                } catch (Exception e) {
                    throw new IOException(e);
                }
            }
        
  public boolean equalsImpl(TQuantizedFeaturesInfo rhs) {
    return native_implJNI.TQuantizedFeaturesInfo_equalsImpl(swigCPtr, this, TQuantizedFeaturesInfo.getCPtr(rhs), rhs);
  }


public boolean equals(Object obj) {
    if (obj instanceof TQuantizedFeaturesInfo) {
        boolean ptrEqual = (((TQuantizedFeaturesInfo)obj).swigCPtr == this.swigCPtr);
        if (ptrEqual) {
            return true;
        } else {
            return this.equalsImpl((TQuantizedFeaturesInfo)obj);
        }
    } else {
        return false;
    }
}

public int hashCode() {
    return (int)this.swigCPtr;
}


    void releaseMem() {
        this.swigCMemOwn = false;
    }

  public TQuantizedFeaturesInfo() {
    this(native_implJNI.new_TQuantizedFeaturesInfo(), true);
  }

}
